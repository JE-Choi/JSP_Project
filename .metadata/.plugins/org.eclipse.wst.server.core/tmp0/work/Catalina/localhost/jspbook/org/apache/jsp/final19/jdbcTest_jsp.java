/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.93
 * Generated at: 2019-06-10 03:50:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.final19;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import javax.naming.*;

public final class jdbcTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('	');
 request.setCharacterEncoding("utf-8"); 
	
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction orderBy(){\r\n");
      out.write("\t\tdocument.location.href = \"jdbcTest.jsp?action=orderby\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction search(){\r\n");
      out.write("\t\tsearch_grade = prompt('검색하고자 하는 학년을 넣으세요(전체는 0)');\r\n");
      out.write("\t\tdocument.location.href = \"jdbcTest.jsp?action=search&search_grade=\"+search_grade;\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\t");
request.setAttribute("test", "기말고사1");
	request.setAttribute("test", "기말고사1");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");

		// 데이터베이스 연결 관련 변수 선언
		Connection conn = null;
		// 데이터베이스 연결로 부터 SQL문을 수행할 수 있도록 해주는 클래스
		PreparedStatement pstmt = null;
		
		/* MySQL 연결정보  -> 0429 최신 버전으로 수정*/ 
		String jdbc_driver = "com.mysql.cj.jdbc.Driver";
		// 데이터 베이스 이름
		String jdbc_url = "jdbc:mysql://127.0.0.1/jspdb?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
		
		try{
			// 1단계: JDBC 드라이버 로깅
			Class.forName(jdbc_driver);
			
			// 2단계: 데이터베이스 연결
			// Connection 클래스 인스턴스 레퍼런스 얻기
			// 유저 이름
			conn = DriverManager.getConnection(jdbc_url,"jspbook","1234");
			
			// 3단계: Statement생성
			String sql = "insert into addrbook_table (name, tel, address, grade) values (?, ?, ?, ?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,request.getParameter("name"));
			pstmt.setString(2, request.getParameter("tel"));
			pstmt.setString(3, request.getParameter("address"));
			pstmt.setString(4, request.getParameter("grade"));
			
			// 4단계: SQL문 전송
			if(request.getParameter("name") != null){
				pstmt.executeUpdate();
			}
			
			
		}catch(Exception e){
			System.out.println(e);
		}
	
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>데이터베이스 관리</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div align=\"center\">\r\n");
      out.write("\t<h2>데이터베이스 관리</h2>\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t\r\n");
      out.write("\t<p>\r\n");
      out.write("\t<form name=form1 method=post action=jdbcTest.jsp>\r\n");
      out.write("\r\n");
      out.write("\t<table border=\"1\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>이름</td>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"name\" maxlength=\"15\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>전화번호</td>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"tel\" maxlength=\"15\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>주소</td>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"address\" maxlength=\"15\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>학년</td>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"grade\" maxlength=\"15\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<input type=submit value=\"추가\"/>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<p>\r\n");
      out.write("\t");

	String action = request.getParameter("action");
	String select_sql = "";
	 try{
		 if(action == null){
			 select_sql = "select * from addrbook_table"; 
		 } else if(action.equals("orderby")){
			 select_sql = "select * from addrbook_table order by name asc";
		 } else if(action.equals("search")){
			 String search_grade = request.getParameter("search_grade");
			 int grade = Integer.parseInt(search_grade);
			 System.out.println(grade);
			 if(grade == 0){
				 select_sql = "select * from addrbook_table"; 
			 } else{
				 select_sql = "select * from addrbook_table where grade="+grade; 
			 }
		 }
		 pstmt = conn.prepareStatement(select_sql);
		 
		 ResultSet rs = pstmt.executeQuery();
		 
      out.write("\r\n");
      out.write("\t\t\t<table border=\"1\">\r\n");
      out.write("\t\t\t\t<tr><th>ID</th>\r\n");
      out.write("\t\t\t\t<th><a href=\"javascript:orderBy()\">이름</a></th>\r\n");
      out.write("\t\t\t\t<th>전화번호</th><th>주소</th>\r\n");
      out.write("\t\t\t\t<th><a href=\"javascript:search()\">학년</a></th></tr>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t ");

		 // 마지막 데이터까지 반복
		 while(rs.next()){
			 String id = rs.getString("id");
			 String name = rs.getString("name");
			 String tel = rs.getString("tel");
			 String address = rs.getString("address");
			 String grade = rs.getString("grade");
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t<td>");
      out.print(id);
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(name );
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(tel );
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(address );
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(grade );
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t \t\t</table>\r\n");
      out.write("\t\t ");

		 
		 // 사용 완료 후 자원 반납
		 rs.close();
		 pstmt.close();
		 conn.close();
	 }catch(Exception e){
		 System.out.println(e);
	 }
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
